{
  "info": {
    "description": "Welcome to the Cookgpt API documentation! This documentation provides detailed information on how to integrate with the Cookgpt API, which powers an AI-powered cooking assistance.\n\nThe API allows you to perform various actions such as user authentication, managing user information, and interacting with the AI chat functionality.\n\nThe API is organized around REST. Our API has predictable resource-oriented URLs, accepts JSON-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.",
    "title": "CookGPT",
    "version": "0.8.0"
  },
  "tags": [
    {
      "name": "auth",
      "description": "This section contains information about user authentication and user management."
    },
    {
      "name": "chat",
      "description": "The AI chat functionality allows users to interact with an AI-powered cooking assistant. The assistant can be used to create recipes, get cooking advice, and more.\n\nChats with the AI are organized into threads. Each thread has a unique ID that is used to identify the thread. The thread ID is used to get the chat messages in the thread, and to send messages to the thread.\n\n> Subsequent versions of the API will allow users to create new threads and interact with the AI assistant in multiple threads.\n\n---\n\nEach user has a `max_chat_cost` which is the total number of tokens that he/she is allowed to spend on chats with the AI assistant. The cost of a chat is the number of tokens used in the query and the response.\n\n> Subsequent versions of the API will allow users to purchase more tokens.\n\n### Chat Memory Optimization\nFor now, the AI's memory has not been optimized and it remembers all chats that it has had with the user. This means that the AI's memory will grow linearly as the user interact with it. This will be fixed in subsequent versions of the API."
    }
  ],
  "servers": [
    {
      "name": "live",
      "url": "https://mkpbackend-fe1c9f5599b1.herokuapp.com"
    },
    {
      "name": "local",
      "url": "http://localhost:8000"
    }
  ],
  "paths": {
    "/chat/": {
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "stream",
            "description": "whether to stream the response",
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            },
            "required": false
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat:Post:Response"
                },
                "example": {
                  "chat": {
                    "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "content": "Okay, tell me what type of rice so I can suggest recipes",
                    "chat_type": "RESPONSE",
                    "cost": 0,
                    "previous_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "next_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "sent_time": "2021-01-01 00:00:00",
                    "thread_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
                  },
                  "streaming": true
                }
              }
            },
            "description": "The chatbot's response"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "could not validate input data"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread:NotFound"
                },
                "example": {
                  "message": "thread not found"
                }
              }
            },
            "description": "An error when the specified thread is not found"
          },
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat:Post:Response"
                },
                "example": {
                  "chat": {
                    "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "content": "Okay, tell me what type of rice so I can suggest recipes",
                    "chat_type": "RESPONSE",
                    "cost": 0,
                    "previous_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "next_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "sent_time": "2021-01-01 00:00:00",
                    "thread_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
                  },
                  "streaming": true
                }
              }
            },
            "description": "A dummy response"
          }
        },
        "tags": [
          "chat"
        ],
        "summary": "Send a message to the chatbot.",
        "description": "Use this endpoint to send a message to the AI assistant. The message will be sent to the AI assistant and the response will be returned in the response body. The response will also be saved in the database.\n\nThe `stream` query parameter can be used to force the AI assistant to respond with a stream of messages. The `stream` query parameter can be set to `true` or `false`. If the `stream` query parameter is set to `true`, the AI assistant would respond send it's response bit by bit. If the `stream` query parameter is set to `false`, the AI assistant would send it's response all at once. If the `stream` query parameter is not specified, the AI assistant would not stream it's response.\n\nThe `streaming` field in the response body is used to determine if the AI assistant is streaming it's response. If the `streaming` field is `true`, the AI assistant is streaming it's response. If the `streaming` field is `false`, the AI assistant is not streaming it's response.\n\n> INFO: When the AI is streaming, you can read the response bit by bit as it is sent from the `/chat/stream` endpoint.\n\nIf the user does not have enough tokens to send the message, a dummy response will be returned in the response body. Neither the query nor the dummy response will not be saved in the database.\n\n> INFO: To identify a dummy response, check if the `chat.cost` field is `0`.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Chat:Post:Body"
              },
              "example": {
                "query": "Hi, I need a recipe for rice",
                "thread_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/all": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "thread_id",
            "description": "id of thread to get chats from",
            "schema": {
              "type": "string",
              "format": "uuid",
              "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chats:Get:Response"
                },
                "example": {
                  "chats": [
                    {
                      "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                      "content": "Okay, tell me what type of rice so I can suggest recipes",
                      "chat_type": "RESPONSE",
                      "cost": 0,
                      "previous_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                      "next_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                      "sent_time": "2021-01-01 00:00:00",
                      "thread_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
                    }
                  ]
                }
              }
            },
            "description": "All messages in the thread"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "could not validate input data"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread:NotFound"
                },
                "example": {
                  "message": "thread not found"
                }
              }
            },
            "description": "An error when the specified thread is not found"
          }
        },
        "tags": [
          "chat"
        ],
        "summary": "Get all messages in a thread.",
        "description": "Use this endpoint to get a list of all messages exchanged between the user and the ai in a thread. The chats are sorted in descending order of the last message sent in the thread.",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chats:Delete:Response"
                },
                "example": {
                  "message": "chat deleted"
                }
              }
            },
            "description": "Success message"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "could not validate input data"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          }
        },
        "tags": [
          "chat"
        ],
        "summary": "Delete all messages in a thread.",
        "description": "Use this endpoint to delete all chats in the thread. **This action cannot be undone**.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Chats:Delete:Body"
              },
              "example": {
                "thread_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/user": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User:Info:Response"
                },
                "example": {
                  "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                  "user_type": "COOK",
                  "first_name": "John",
                  "last_name": "Doe",
                  "username": "johndoe",
                  "email": "johndoe@example.com",
                  "profile_picture": "https://example.com/profile.jpg",
                  "max_chat_cost": 4000,
                  "total_chat_cost": 1000
                }
              }
            },
            "description": "User information"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          }
        },
        "tags": [
          "user"
        ],
        "summary": "Get user's information",
        "description": "Get all information about a user.",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User:Update:Response"
                },
                "example": {
                  "message": "Successfully updated user"
                }
              }
            },
            "description": "Success message after modifying user info"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "could not validate input data"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User:Update:Error"
                },
                "example": {
                  "message": "email is taken"
                }
              }
            },
            "description": "Error while updating user"
          }
        },
        "tags": [
          "user"
        ],
        "summary": "Update user's information",
        "description": "Update a user's information. Each of the fields in the request body is optional. Only the fields that are specified will be updated.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User:Update:Body"
              },
              "example": {
                "first_name": "John",
                "last_name": "Doe",
                "username": "johndoe",
                "email": "johndoe@example.com",
                "password": "Password123!"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User:Delete:Response"
                },
                "example": {
                  "message": "Successfully deleted"
                }
              }
            },
            "description": "Success message after deletion of user"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User:Delete:Error"
                },
                "example": {
                  "message": "Cannot delete user"
                }
              }
            },
            "description": "Error while deleting user"
          }
        },
        "tags": [
          "user"
        ],
        "summary": "Delete a user",
        "description": "Delete a user's account. **This action cannot be undone**.",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/login": {
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth:Login:Response"
                },
                "example": {
                  "message": "Successfully logged in",
                  "auth_info": {
                    "user_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "user_name": "John Doe",
                    "atoken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                    "atoken_expiry": "2021-01-01 00:00:00",
                    "rtoken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                    "rtoken_expiry": "2021-01-01 00:00:00",
                    "user_type": "COOK",
                    "auth_type": "Bearer"
                  }
                }
              }
            },
            "description": "Authentication info"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "could not validate input data"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth:Login:Unauthorized"
                },
                "example": {
                  "message": "Cannot authenticate"
                }
              }
            },
            "description": "Error message if password is incorrect"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth:Login:NotFound"
                },
                "example": {
                  "message": "User does not exist"
                }
              }
            },
            "description": "Error message if user does not exist"
          }
        },
        "tags": [
          "auth"
        ],
        "summary": "Log a user into the system.",
        "description": "Use this endpoint to authenticate a user and get authentication info. This endpoint returns an access token and a refresh token. The access token is used to authenticate the user for a limited time. The refresh token is used to get a new access token when the old one expires via the `/auth/refresh` endpoint.\n\nThe expiry time of  both tokens are also returned. If the refresh token expires, the user will have to login again. Use the expiry to check and refresh the access token before it expires.\n\nThe access token should be sent in the **Authorization** header as a `Bearer` token for all requests that require authentication.\n\nThe `auth_info.user_type` field is used to determine the type of user that is logged in. This can be used to determine the permissions of the user.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth:Login:Body"
              },
              "example": {
                "login": "johndoe",
                "password": "Password123!"
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth:Logout:Response"
                },
                "example": {
                  "message": "Logged out user"
                }
              }
            },
            "description": "Success message"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          }
        },
        "tags": [
          "auth"
        ],
        "summary": "Log a user out of the system.",
        "description": "Use this endpoint to logout a user. This will invalidate the user's refresh token and access token. The user will have to login again to get a new authentication info.",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/signup": {
      "post": {
        "parameters": [],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth:Signup:Response"
                },
                "example": {
                  "message": "Successfully signed up",
                  "user": {
                    "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "user_type": "COOK",
                    "first_name": "John",
                    "last_name": "Doe",
                    "username": "johndoe",
                    "email": "johndoe@example.com",
                    "profile_picture": "https://example.com/profile.jpg",
                    "max_chat_cost": 4000,
                    "total_chat_cost": 1000
                  }
                }
              }
            },
            "description": "Success message"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "could not validate input data"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth:Signup:Error"
                },
                "example": {
                  "message": "email is taken"
                }
              }
            },
            "description": "Error message while creating user"
          }
        },
        "tags": [
          "auth"
        ],
        "summary": "Signup a new user.",
        "description": "Use this endpoint to register a new user. If an error occurs, the error message will be returned in the response body.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Auth:Signup:Body"
              },
              "example": {
                "first_name": "John",
                "last_name": "Doe",
                "username": "johndoe",
                "email": "johndoe@example.com",
                "password": "Password123!"
              }
            }
          }
        }
      }
    },
    "/chat/thread": {
      "post": {
        "parameters": [],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread:Post:Response"
                },
                "example": {
                  "message": "thread created",
                  "thread": {
                    "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "chat_count": 2,
                    "cost": 220
                  }
                }
              }
            },
            "description": "Successful response"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "could not validate input data"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          }
        },
        "tags": [
          "thread"
        ],
        "summary": "Create a new thread.",
        "description": "You can optionally supply the title of the thread to create by         supplying the `title` field in the body of the request",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Thread:Post:Body"
              },
              "example": {
                "title": "Jollof Rice Recipe"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Auth:Refresh:Response"
                },
                "example": {
                  "message": "Refreshed access token",
                  "auth_info": {
                    "user_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "user_name": "John Doe",
                    "atoken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                    "atoken_expiry": "2021-01-01 00:00:00",
                    "rtoken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                    "rtoken_expiry": "2021-01-01 00:00:00",
                    "user_type": "COOK",
                    "auth_type": "Bearer"
                  }
                }
              }
            },
            "description": "Authentication info"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          }
        },
        "tags": [
          "auth"
        ],
        "summary": "Refresh the access token.",
        "description": "Use this endpoint to refresh an access token. The access token is used to authenticate the user for a limited time. The refresh token is used to get a new access token when the old one expires. \n\nThe refresh token should be sent in the **Authorization** header as a `Bearer` token for all requests that require authentication.\n\nThe output of this endpoint is similar to the `/auth/login` endpoint.",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/threads": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Threads:Get:Response"
                },
                "example": {
                  "threads": [
                    {
                      "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                      "chat_count": 2,
                      "cost": 220
                    },
                    {
                      "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                      "chat_count": 2,
                      "cost": 220
                    }
                  ]
                }
              }
            },
            "description": "Successful response"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          }
        },
        "tags": [
          "thread"
        ],
        "summary": "Get all threads",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Threads:Delete:Response"
                }
              }
            },
            "description": "Successful response"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          }
        },
        "tags": [
          "thread"
        ],
        "summary": "Delete all threads",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/{chat_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "chat_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat:Get:Response"
                },
                "example": {
                  "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                  "content": "Okay, tell me what type of rice so I can suggest recipes",
                  "chat_type": "RESPONSE",
                  "cost": 0,
                  "previous_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                  "next_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                  "sent_time": "2021-01-01 00:00:00",
                  "thread_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
                }
              }
            },
            "description": "A single chat"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "Not found"
          }
        },
        "tags": [
          "chat"
        ],
        "summary": "Get a single chat from a thread.",
        "description": "Use this endpoint to get a specific chat in the thread. You need to specify the chat ID in the URL.",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "chat_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat:Delete:Response"
                },
                "example": {
                  "message": "chat deleted"
                }
              }
            },
            "description": "Success message"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "Not found"
          }
        },
        "tags": [
          "chat"
        ],
        "summary": "Delete a single chat from a thread.",
        "description": "Use this endpoint to delete a specific chat in the thread. **This action cannot be undone**. You need to specify the chat ID in the URL.",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    },
    "/chat/stream/{chat_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "chat_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "Not found"
          },
          "200": {
            "content": {
              "text/html": {
                "schema": {}
              }
            },
            "description": "A streamed response"
          }
        },
        "tags": [
          "chat"
        ],
        "summary": "Read a streamed response bit by bit.",
        "description": "Use this endpoint to read the AI assistant's response bit by bit. This endpoint is used when the AI assistant is streaming it's response. The `chat_id` url parameter is used to specify the chat that you want to read from. The `id` field in the response body from the `/chat` endpoint contains the `chat_id`."
      }
    },
    "/chat/thread/{thread_id}": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread:Get:Response"
                }
              }
            },
            "description": "Successful response"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "Not found"
          }
        },
        "tags": [
          "thread"
        ],
        "summary": "Get details of a thread.",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "patch": {
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread:Patch:Response"
                },
                "example": {
                  "message": "thread updated",
                  "thread": {
                    "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                    "chat_count": 2,
                    "cost": 220
                  }
                }
              }
            },
            "description": "Successful response"
          },
          "406": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            },
            "description": "could not validate input data"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "Not found"
          }
        },
        "tags": [
          "thread"
        ],
        "summary": "Modify a thread's information",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Thread:Patch:Body"
              },
              "example": {
                "title": "Jollof Rice Recipe"
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": []
          }
        ]
      },
      "delete": {
        "parameters": [
          {
            "in": "path",
            "name": "thread_id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Thread:Delete:Response"
                },
                "example": {
                  "message": "thread deleted"
                }
              }
            },
            "description": "Successful response"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "insufficient permissions"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPError"
                }
              }
            },
            "description": "Not found"
          }
        },
        "tags": [
          "thread"
        ],
        "summary": "Delete a thread and all chats within it",
        "security": [
          {
            "BearerAuth": []
          }
        ]
      }
    }
  },
  "openapi": "3.0.2",
  "components": {
    "schemas": {
      "ValidationError": {
        "properties": {
          "detail": {
            "type": "object",
            "properties": {
              "<location>": {
                "type": "object",
                "properties": {
                  "<field_name>": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "HTTPError": {
        "properties": {
          "detail": {
            "type": "object"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "Chat:Post:Body": {
        "type": "object",
        "properties": {
          "image": {
            "default": null,
            "writeOnly": true,
            "nullable": true,
            "x-minimum": "1KB",
            "x-maximum": "8MB",
            "description": "chat image",
            "example": null,
            "type": "string",
            "format": "binary"
          },
          "query": {
            "type": "string",
            "description": "chat content",
            "example": "Hi, I need a recipe for rice"
          },
          "thread_id": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the thread this chat belongs to. If not specified, a new thread will be created.",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          }
        },
        "required": [
          "query"
        ]
      },
      "ChatMedia": {
        "type": "object",
        "properties": {
          "type": {
            "description": "type of media",
            "example": "image",
            "type": "string",
            "enum": [
              "IMAGE",
              "VIDEO",
              "AUDIO",
              "DOCUMENT"
            ]
          },
          "url": {
            "type": "string",
            "format": "url",
            "description": "url of media",
            "example": "https://example.com/image.png"
          }
        }
      },
      "Chat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "chat id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "content": {
            "type": "string",
            "description": "chat content",
            "example": "Hi, I need a recipe for rice"
          },
          "chat_type": {
            "description": "chat type",
            "example": "query",
            "type": "string",
            "enum": [
              "QUERY",
              "RESPONSE"
            ]
          },
          "cost": {
            "type": "integer",
            "description": "cost of this chat",
            "example": 100
          },
          "previous_chat_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "previous chat id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "next_chat_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "next chat id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "sent_time": {
            "type": "string",
            "format": "date-time",
            "description": "time message was sent",
            "example": "2021-01-01 00:00:00"
          },
          "thread_id": {
            "type": "string",
            "format": "uuid",
            "description": "chat's thread id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "media": {
            "type": "array",
            "description": "list of media",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ChatMedia"
            }
          }
        }
      },
      "Chat:Post:Response": {
        "type": "object",
        "properties": {
          "chat": {
            "$ref": "#/components/schemas/Chat"
          },
          "streaming": {
            "type": "boolean",
            "description": "indicates if the chatbot is streaming",
            "example": true
          }
        }
      },
      "Thread:NotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "thread not found"
          }
        }
      },
      "Chats:Get:Response": {
        "type": "object",
        "properties": {
          "chats": {
            "type": "array",
            "description": "list of chats",
            "example": [
              {
                "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                "content": "Okay, tell me what type of rice so I can suggest recipes",
                "chat_type": "RESPONSE",
                "cost": 0,
                "previous_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                "next_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                "sent_time": "2021-01-01 00:00:00",
                "thread_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
              },
              {
                "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                "content": "Okay, tell me what type of rice so I can suggest recipes",
                "chat_type": "RESPONSE",
                "cost": 0,
                "previous_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                "next_chat_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                "sent_time": "2021-01-01 00:00:00",
                "thread_id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Chat"
            }
          }
        }
      },
      "Chats:Delete:Body": {
        "type": "object",
        "properties": {
          "thread_id": {
            "type": "string",
            "format": "uuid",
            "description": "id of thread to be cleared",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          }
        },
        "required": [
          "thread_id"
        ]
      },
      "Chats:Delete:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "all chats deleted"
          }
        }
      },
      "User:Info:Response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "user's id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "first_name": {
            "type": "string",
            "description": "user's first name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "user's last name",
            "example": "Doe"
          },
          "username": {
            "type": "string",
            "description": "user's username",
            "example": "johndoe"
          },
          "email": {
            "type": "string",
            "description": "user's email address",
            "example": "johndoe@example.com"
          },
          "user_type": {
            "description": "the type of user",
            "example": "COOK",
            "type": "string",
            "enum": [
              "ADMIN",
              "COOK"
            ]
          },
          "profile_picture": {
            "type": "string",
            "format": "url",
            "description": "the url of the user's profile picture",
            "example": "https://example.com/profile.jpg"
          },
          "max_chat_cost": {
            "type": "integer",
            "description": "the maximum allowed cost of a user's chat",
            "example": 4000
          },
          "total_chat_cost": {
            "type": "integer",
            "description": "the total cost of a user's chat",
            "example": 1000
          }
        }
      },
      "User:Update:Body": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "user's first name",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "user's last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "user's email address",
            "example": "johndoe@example.com"
          },
          "password": {
            "type": "string",
            "description": "user's password",
            "example": "Password123!"
          },
          "username": {
            "type": "string",
            "description": "user's username",
            "example": "johndoe"
          }
        }
      },
      "User:Update:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "Successfully updated user"
          }
        }
      },
      "User:Update:Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "email is taken"
          }
        }
      },
      "User:Delete:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "Successfully deleted"
          }
        }
      },
      "User:Delete:Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "Cannot delete user"
          }
        }
      },
      "Auth:Login:Body": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "description": "user's username or email",
            "example": "johndoe@example.com"
          },
          "password": {
            "type": "string",
            "description": "user's password",
            "example": "Password123!"
          }
        },
        "required": [
          "login",
          "password"
        ]
      },
      "AuthInfo": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "user's id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "user_name": {
            "type": "string",
            "description": "user's name",
            "example": "John Doe"
          },
          "atoken": {
            "type": "string",
            "description": "a JWT to authenticate a user",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          },
          "atoken_expiry": {
            "type": "string",
            "format": "date-time",
            "description": "the time the access token expires",
            "example": "2021-01-01 00:00:00"
          },
          "rtoken": {
            "type": "string",
            "description": "a JWT to refresh a user's access token",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
          },
          "rtoken_expiry": {
            "type": "string",
            "format": "date-time",
            "description": "the time the refresh token expires",
            "example": "2021-01-01 00:00:00"
          },
          "user_type": {
            "description": "the type of user",
            "example": "COOK",
            "type": "string",
            "enum": [
              "ADMIN",
              "COOK"
            ]
          },
          "auth_type": {
            "type": "string",
            "description": "the type of authentication",
            "example": "Bearer"
          }
        }
      },
      "Auth:Login:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "Successfully logged in"
          },
          "auth_info": {
            "$ref": "#/components/schemas/AuthInfo"
          }
        }
      },
      "Auth:Login:Unauthorized": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "Cannot authenticate"
          }
        }
      },
      "Auth:Login:NotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "User does not exist"
          }
        }
      },
      "Auth:Logout:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "Logged out user"
          }
        }
      },
      "Auth:Signup:Body": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "user's name",
            "example": "John Doe"
          },
          "last_name": {
            "type": "string",
            "nullable": true,
            "description": "user's last name",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "user's email address",
            "example": "johndoe@example.com"
          },
          "password": {
            "type": "string",
            "description": "user's password",
            "example": "Password123!"
          },
          "username": {
            "type": "string",
            "nullable": true,
            "description": "user's username",
            "example": "johndoe"
          }
        },
        "required": [
          "email",
          "first_name",
          "password"
        ]
      },
      "Auth:Signup:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "Successfully signed up"
          }
        }
      },
      "Auth:Signup:Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "email is taken"
          }
        }
      },
      "Thread:Post:Body": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true,
            "description": "title of the thread",
            "example": "Jollof Rice Recipe"
          }
        }
      },
      "Thread": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "chat's thread id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "title": {
            "type": "string",
            "description": "title of the thread",
            "example": "Jollof Rice Recipe"
          },
          "chat_count": {
            "type": "integer",
            "description": "number of chats in this thread",
            "example": 2
          },
          "cost": {
            "type": "integer",
            "description": "cost of all chats in this thread",
            "example": 220
          }
        }
      },
      "Thread:Post:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "thread created"
          },
          "thread": {
            "$ref": "#/components/schemas/Thread"
          }
        }
      },
      "Auth:Refresh:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "Refreshed access token"
          },
          "auth_info": {
            "$ref": "#/components/schemas/AuthInfo"
          }
        }
      },
      "Threads:Get:Response": {
        "type": "object",
        "properties": {
          "threads": {
            "type": "array",
            "description": "all threads",
            "example": [
              {
                "id": "36b51f8a-c9fa-43f8-92fa-ff6927736c10",
                "chat_count": 2,
                "cost": 220
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Thread"
            }
          }
        }
      },
      "Threads:Delete:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "all threads deleted"
          }
        }
      },
      "Chat:Get:Response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "chat id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "content": {
            "type": "string",
            "description": "chat content",
            "example": "Hi, I need a recipe for rice"
          },
          "chat_type": {
            "description": "chat type",
            "example": "query",
            "type": "string",
            "enum": [
              "QUERY",
              "RESPONSE"
            ]
          },
          "cost": {
            "type": "integer",
            "description": "cost of this chat",
            "example": 100
          },
          "previous_chat_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "previous chat id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "next_chat_id": {
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "description": "next chat id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "sent_time": {
            "type": "string",
            "format": "date-time",
            "description": "time message was sent",
            "example": "2021-01-01 00:00:00"
          },
          "thread_id": {
            "type": "string",
            "format": "uuid",
            "description": "chat's thread id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "media": {
            "type": "array",
            "description": "list of media",
            "example": [],
            "items": {
              "$ref": "#/components/schemas/ChatMedia"
            }
          }
        }
      },
      "Chat:Delete:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "chat deleted"
          }
        }
      },
      "Thread:Get:Response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "chat's thread id",
            "example": "36b51f8a-c9fa-43f8-92fa-ff6927736c10"
          },
          "title": {
            "type": "string",
            "description": "title of the thread",
            "example": "Jollof Rice Recipe"
          },
          "chat_count": {
            "type": "integer",
            "description": "number of chats in this thread",
            "example": 2
          },
          "cost": {
            "type": "integer",
            "description": "cost of all chats in this thread",
            "example": 220
          }
        }
      },
      "Thread:Patch:Body": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true,
            "description": "the new name of the thread",
            "example": "Jollof Rice Recipe"
          }
        }
      },
      "Thread:Patch:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "thread updated"
          },
          "thread": {
            "$ref": "#/components/schemas/Thread"
          }
        }
      },
      "Thread:Delete:Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "success message",
            "example": "thread deleted"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "The API incorporates a secure authentication mechanism using JSON Web Tokens (JWT). To access user-specific functionalities, such as managing personal information and interacting with the AI chat functionality, you need to include a JWT bearer token in the `Authorization` header of your API requests.\n\nInclude the user's authentication token in the `Authorization` header of the request. The header should be in the following format\n\n```\nAuthorization: Bearer <authentication-token>\n```"
      }
    }
  }
}